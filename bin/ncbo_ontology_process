#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'
require 'optparse'

options = {all: false}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: ncbo_ontology_process [options]"
  options[:ontologies] = []
  opts.on('-a', '--all-ontologies', 'Process all ontologies (this or -o option required).') do
    LinkedData::Models::Ontology.all.each  do |ont|
      ont.bring(:acronym)
      options[:ontologies].push(ont.acronym)
    end
    options[:all] = true
  end

  opts.on('-o', '--ontologies ACRONYM1,ACRONYM2,ACRONYM3', 'Comma-separated list of ontologies to process (this or -a option required).') do |acronyms|
    options[:ontologies] = acronyms.split(",").map {|o| o.strip}
  end

  options[:tasks] = NcboCron::Models::OntologySubmissionParser::ACTIONS
  opts.on('-t', '--tasks process_rdf,generate_labels=false,index_search,run_metrics', "Optional comma-separated list of processing tasks to perform (or exclude). Default: #{NcboCron::Models::OntologySubmissionParser::ACTIONS.keys.join(',')}") do |tasks|
    tasks_obj = {}
    tasks.split(',').each { |t|
      t_arr = t.gsub(/\s+/, '').gsub(/^:/, '').split('=')
      tasks_obj[t_arr[0].to_sym] = (t_arr.length <= 1 || t_arr[1].downcase === 'true')
    }
    tasks_obj[:generate_labels] = true if tasks_obj[:process_rdf] && !tasks_obj.has_key?(:generate_labels)
    options[:tasks].each {|k, _| options[:tasks][k] = false unless tasks_obj[k]}
  end

  options[:logfile] = STDOUT
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is STDOUT)" ) do |filename|
    options[:logfile] = filename
  end

  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
if options[:ontologies].empty?
  puts opt_parser.help
  exit(1)
end

if options[:tasks].empty?
  puts 'No valid processing tasks found'
  puts opt_parser.help
  exit(1)
end

#######################################################################################################################
#
# MAIN
#
if options[:all]
  puts "About to perform the following tasks on ALL ontologies: #{options[:tasks]}"
  #puts "Type 'yes' to continue: "
  #$stdout.flush
  #confirm = $stdin.gets
  #abort("Aborting...\n") unless (confirm.strip == 'yes')
else
  puts "Processing the following tasks: #{options[:tasks]} on ontologies: #{options[:ontologies]}"
end

logger = Logger.new(options[:logfile])
puts "Processing details are logged to #{options[:logfile] == STDOUT ? "STDOUT" : options[:logfile]}"

options[:ontologies].each do |acronym|
  begin
    ont = LinkedData::Models::Ontology.find(acronym).first
    if ont.nil?
      msg = "Error, ontology not found: #{acronym}"
      logger.error(msg)
      puts msg
      next
    end
    sub = ont.latest_submission(status: :any)
    if sub.nil?
      msg = "Error, cannot find latest submission."
      logger.error(msg)
      puts msg
      next
    end

    NcboCron::Models::OntologySubmissionParser.new.process_submission(logger, sub.id.to_s, options[:tasks])
  rescue Exception => e
    msg = "Failed, exception: #{e.class}: #{e.message}\n#{e.backtrace.join("\n")}"
    logger.error(msg)
  end
end

